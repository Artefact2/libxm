#!/usr/bin/env php
<?php
/* Author: Romain "Artefact2" Dalmaso <artefact2@gmail.com> */

/* This program is free software. It comes without any warranty, to the
 * extent permitted by applicable law. You can redistribute it and/or
 * modify it under the terms of the Do What The Fuck You Want To Public
 * License, Version 2, as published by Sam Hocevar. See
 * http://sam.zoy.org/wtfpl/COPYING for more details. */

chdir(__DIR__.'/..');

if($argc === 3 && $argv[1] === '--') {
	$cmd = $argv[2];

	$build = '/tmp/libxm-build-test-'
		.(new \DateTime())->format('YmdHisu')
		.'-'.getmypid();
	if(file_exists($build)) die(1);
	register_shutdown_function(function() use($build) {
		shell_exec('rm -Rf '.escapeshellarg($build));
	});
	$cmd = str_replace('@@BUILD_DIR@@', escapeshellcmd($build), $cmd);

	passthru('sh -c '.escapeshellarg($cmd), $ret);
	if($ret !== 0) die(1);
	passthru('make -sC '.escapeshellarg($build), $ret);
	if($ret !== 0) die(1);
	passthru(escapeshellcmd($build.'/libxmize')
	         .' examples/xmprocdemo/mus.xm'
	         .' >'.escapeshellarg($build.'/mus.libxm')
	         , $ret);
	passthru(escapeshellcmd($build.'/libxmtoau')
	         .' <'.escapeshellarg($build.'/mus.libxm')
	         .' >/dev/null'
	         , $ret);
	if($ret !== 0) die(1);
	die(0);
}

if($argc !== 2 || $argv[1] !== '--') {
	$parallel_args = $argv;
	array_shift($parallel_args);
	$parallel_args = implode(' ', array_map('escapeshellarg',
	                                        $parallel_args));
	passthru('parallel -N1 --group --halt soon,fail=1 '.$parallel_args.' '.escapeshellcmd($argv[0]).' -- {} :::: <('.escapeshellcmd($argv[0]).' -- | sort -R)', $ret);
	echo "\e[1m>>> Exiting with code ", $ret, "\e[0m", PHP_EOL;
	die($ret);

}

function build_commands(array $args, string $prefix = ''): generator {
	if($args === []) {
		yield $prefix;
		return;
	}

	$vals = reset($args);
	$k = key($args);
	unset($args[$k]);

	foreach($vals as $v) {
		if(is_string($k)) $v = $k.$v;
		yield from build_commands(
			$args, $prefix === '' ? $v : $prefix.' '.$v
		);
	}
}

foreach(build_commands([
	['CC=gcc', 'CC=clang'],
	['cmake --log-level=WARNING -DCMAKE_RULE_MESSAGES=OFF -DCMAKE_TARGET_MESSAGES=OFF -DCMAKE_C_FLAGS="-Werror" -DCMAKE_C_FLAGS_DEBUG="-g -Og -DDEBUG" -Sexamples/libxmize -B@@BUILD_DIR@@ >/dev/null'],
	[
		'-DCMAKE_BUILD_TYPE=Debug',
		'-DCMAKE_BUILD_TYPE=MinSizeRel -DXM_STRINGS=OFF -DXM_VERBOSE=OFF -DXM_TIMING_FUNCTIONS=OFF -DXM_MUTING_FUNCTIONS=OFF',
	],
	[
		'-DXM_SAMPLE_TYPE=int8_t -DXM_LIBXM_DELTA_SAMPLES=ON',
		'-DXM_SAMPLE_TYPE=float -DXM_LIBXM_DELTA_SAMPLES=OFF',
	],
	[
		'-DXM_RAMPING=ON -DXM_LINEAR_INTERPOLATION=ON',
		'-DXM_RAMPING=OFF -DXM_LINEAR_INTERPOLATION=OFF',
	],
	[
		'',
		'-DXM_DISABLED_EFFECTS=0xFFFFFFFFFFFFFFFF -DXM_DISABLED_VOLUME_EFFECTS=0xFFFF -DXM_DISABLED_FEATURES=0xFFFFFFFFFFFFFEFD -DXM_PANNING_TYPE=0 -DXM_LOOPING_TYPE=1 -DXM_SAMPLE_RATE=44100',
	],
]) as $cmd) {
	echo $cmd, PHP_EOL;
}
