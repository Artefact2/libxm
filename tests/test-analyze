#!/usr/bin/env php
<?php
/* Author: Romain "Artefact2" Dalmaso <artefact2@gmail.com> */

/* This program is free software. It comes without any warranty, to the
 * extent permitted by applicable law. You can redistribute it and/or
 * modify it under the terms of the Do What The Fuck You Want To Public
 * License, Version 2, as published by Sam Hocevar. See
 * http://sam.zoy.org/wtfpl/COPYING for more details. */

if($argc === 1) {
	fprintf(STDERR, "Usage: %s <modfiles...>\n", $argv[0]);
	die(1);
}

$tmp = '/tmp/libxm-test-analyze-'.getmypid();
register_shutdown_function(function() use($tmp) {
	shell_exec('rm -Rf '.escapeshellarg($tmp));
});

const COMMON_FLAGS = '-DCMAKE_RULE_MESSAGES=OFF -DCMAKE_TARGET_MESSAGES=OFF'
	.' -DCMAKE_BUILD_TYPE=MinSizeRel -DXM_VERBOSE=OFF'
	.' -DXM_LIBXM_DELTA_SAMPLES=OFF -DXM_LINEAR_INTERPOLATION=OFF'
	.' -DXM_RAMPING=OFF -DXM_STRINGS=OFF -DXM_TIMING_FUNCTIONS=OFF'
	.' -DXM_MUTING_FUNCTIONS=OFF -DXM_SAMPLE_TYPE=float';

passthru('cmake '.COMMON_FLAGS
         .' -S '.escapeshellarg(__DIR__.'/../tests')
         .' -B '.escapeshellarg($tmp.'/full')
         .'>/dev/null', $ret);
if($ret !== 0) die($ret);

passthru('make -sC '.escapeshellarg($tmp.'/full')
         .' test-analyze-helper', $ret);
if($ret !== 0) die($ret);

/* XXX: can be parallelized */
for($i = 1; $i < $argc; ++$i) {
	$cmflags = shell_exec(escapeshellcmd($tmp.'/full/test-analyze-helper')
	                      .' --analyze '.escapeshellarg($argv[$i]));

	passthru('cmake '.COMMON_FLAGS.' '.trim($cmflags)
	         .' -S '.escapeshellarg(__DIR__.'/../tests')
	         .' -B '.escapeshellarg($tmp.'/'.$i)
	         .'>/dev/null', $ret);
	if($ret !== 0) die($ret);

	passthru('make -sC '.escapeshellarg($tmp.'/'.$i).
	         ' test-analyze-helper', $ret);
	if($ret !== 0) die($ret);

	passthru(escapeshellcmd($tmp.'/full/test-analyze-helper')
	         .' <('.escapeshellcmd($tmp.'/full/test-analyze-helper')
	               .' '.escapeshellarg($argv[$i]).')'
	         .' <('.escapeshellcmd($tmp.'/'.$i.'/test-analyze-helper')
	               .' '.escapeshellarg($argv[$i]).')',
	         $ret);

	echo "\e[1m";
	if($ret === 0) {
		echo "\e[32mPASS";
	} else {
		echo "\e[31mFAIL";
	}
	echo "\e[0m ", $argv[$i], PHP_EOL;

	shell_exec('rm -Rf '.escapeshellarg($tmp.'/'.$i));
}
